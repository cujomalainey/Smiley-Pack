#include "Adafruit_NeoPixel.h"

#define C_GREEN       20
#define C_BLACK       0
#define S_WHITE       20
#define LED_OFF       0

#define TAN_RED       84
#define TAN_GRE       72
#define TAN_BLU       56

#define NUMPIXELS     64
#define PIN           12
#define MATRIX_HEIGHT 8
#define MATRIX_WIDTH  8

#define RED           0
#define GREEN         1
#define BLUE          2

int CREEPER[MATRIX_HEIGHT][MATRIX_WIDTH][3] = {
	{ {LED_OFF, C_GREEN, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}}, 
	{ {LED_OFF, C_GREEN, LED_OFF}, {C_BLACK, LED_OFF, LED_OFF}, {C_BLACK, LED_OFF, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}, {C_BLACK, LED_OFF, LED_OFF}, {C_BLACK, LED_OFF, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}},
	{ {LED_OFF, C_GREEN, LED_OFF}, {C_BLACK, LED_OFF, LED_OFF}, {C_BLACK, LED_OFF, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}, {C_BLACK, LED_OFF, LED_OFF}, {C_BLACK, LED_OFF, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}},
	{ {LED_OFF, C_GREEN, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}, {C_BLACK, LED_OFF, LED_OFF}, {C_BLACK, LED_OFF, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}},
	{ {LED_OFF, C_GREEN, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}, {C_BLACK, LED_OFF, LED_OFF}, {C_BLACK, LED_OFF, LED_OFF}, {C_BLACK, LED_OFF, LED_OFF}, {C_BLACK, LED_OFF, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}},
	{ {LED_OFF, C_GREEN, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}, {C_BLACK, LED_OFF, LED_OFF}, {C_BLACK, LED_OFF, LED_OFF}, {C_BLACK, LED_OFF, LED_OFF}, {C_BLACK, LED_OFF, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}},
	{ {LED_OFF, C_GREEN, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}, {C_BLACK, LED_OFF, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}, {C_BLACK, LED_OFF, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}},
	{ {LED_OFF, C_GREEN, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}, {LED_OFF, C_GREEN, LED_OFF}},
	};

int SHEEP[MATRIX_HEIGHT][MATRIX_WIDTH][3] = {
	{ {S_WHITE, S_WHITE, S_WHITE}, {S_WHITE, S_WHITE, S_WHITE}, {S_WHITE, S_WHITE, S_WHITE}, {S_WHITE, S_WHITE, S_WHITE}, {S_WHITE, S_WHITE, S_WHITE}, {S_WHITE, S_WHITE, S_WHITE}, {S_WHITE, S_WHITE, S_WHITE}, {S_WHITE, S_WHITE, S_WHITE}}, 
	{ {S_WHITE, S_WHITE, S_WHITE}, {S_WHITE, S_WHITE, S_WHITE}, {S_WHITE, S_WHITE, S_WHITE}, {S_WHITE, S_WHITE, S_WHITE}, {S_WHITE, S_WHITE, S_WHITE}, {S_WHITE, S_WHITE, S_WHITE}, {S_WHITE, S_WHITE, S_WHITE}, {S_WHITE, S_WHITE, S_WHITE}},
	{ {S_WHITE, S_WHITE, S_WHITE}, {TAN_RED, TAN_GRE, TAN_BLU}, {TAN_RED, TAN_GRE, TAN_BLU}, {TAN_RED, TAN_GRE, TAN_BLU}, {TAN_RED, TAN_GRE, TAN_BLU}, {TAN_RED, TAN_GRE, TAN_BLU}, {TAN_RED, TAN_GRE, TAN_BLU}, {S_WHITE, S_WHITE, S_WHITE}},
	{ {S_WHITE, S_WHITE, S_WHITE}, {LED_OFF, LED_OFF, LED_OFF}, {S_WHITE, S_WHITE, S_WHITE}, {TAN_RED, TAN_GRE, TAN_BLU}, {TAN_RED, TAN_GRE, TAN_BLU}, {S_WHITE, S_WHITE, S_WHITE}, {LED_OFF, LED_OFF, LED_OFF}, {S_WHITE, S_WHITE, S_WHITE}},
	{ {S_WHITE, S_WHITE, S_WHITE}, {TAN_RED, TAN_GRE, TAN_BLU}, {TAN_RED, TAN_GRE, TAN_BLU}, {TAN_RED, TAN_GRE, TAN_BLU}, {TAN_RED, TAN_GRE, TAN_BLU}, {TAN_RED, TAN_GRE, TAN_BLU}, {TAN_RED, TAN_GRE, TAN_BLU}, {S_WHITE, S_WHITE, S_WHITE}},
	{ {S_WHITE, S_WHITE, S_WHITE}, {S_WHITE, S_WHITE, S_WHITE}, {TAN_RED, TAN_GRE, TAN_BLU}, {C_BLACK, LED_OFF, LED_OFF}, {C_BLACK, LED_OFF, LED_OFF}, {TAN_RED, TAN_GRE, TAN_BLU}, {S_WHITE, S_WHITE, S_WHITE}, {S_WHITE, S_WHITE, S_WHITE}},
	{ {S_WHITE, S_WHITE, S_WHITE}, {S_WHITE, S_WHITE, S_WHITE}, {TAN_RED, TAN_GRE, TAN_BLU}, {TAN_RED, TAN_GRE, TAN_BLU}, {TAN_RED, TAN_GRE, TAN_BLU}, {TAN_RED, TAN_GRE, TAN_BLU}, {S_WHITE, S_WHITE, S_WHITE}, {S_WHITE, S_WHITE, S_WHITE}},
	{ {S_WHITE, S_WHITE, S_WHITE}, {S_WHITE, S_WHITE, S_WHITE}, {S_WHITE, S_WHITE, S_WHITE}, {S_WHITE, S_WHITE, S_WHITE}, {S_WHITE, S_WHITE, S_WHITE}, {S_WHITE, S_WHITE, S_WHITE}, {S_WHITE, S_WHITE, S_WHITE}, {S_WHITE, S_WHITE, S_WHITE}},
	};

Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);

void setup() {
	pixels.begin();
	update_leds(SHEEP);

}

void loop() {

}

void update_leds(int frame[MATRIX_HEIGHT][MATRIX_WIDTH][3]) {
	for (int y = 0; y < MATRIX_HEIGHT; y++)
	{
		for (int x = 0; x < MATRIX_WIDTH; x++)
		{
			pixels.setPixelColor(y*MATRIX_WIDTH + x, 
      			pixels.Color(frame[y][x][RED], frame[y][x][GREEN], frame[y][x][BLUE])
      			);
		}
	}
	pixels.show();
}